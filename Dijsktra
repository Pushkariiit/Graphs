vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,S});
        
        vector<int>dis(V,1e8);
        dis[S]=0;
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            
            int wt = it.first;
            int node = it.second;
            
            for(auto it:adj[node]){
                
                int adjwt = it[1];
                int adjnode = it[0];
                
                if(dis[node]+adjwt < dis[adjnode]){
                    dis[adjnode]=dis[node]+adjwt;
                    
                    pq.push({dis[adjnode],adjnode});
                }
            }
        }
        
        return dis;
    }

TC : O(E*logV)


// Find Shortest PAth


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,S});
        
        vector<int>dis(V,1e8);
        vector<int>par(V,1e8);
        
        for(int i=0;i<V;i++) par[i]=i;
        dis[S]=0;
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            
            int wt = it.first;
            int node = it.second;
            
            for(auto it:adj[node]){
                
                int adjwt = it[1];
                int adjnode = it[0];
                
                if(dis[node]+adjwt < dis[adjnode]){
                    dis[adjnode]=dis[node]+adjwt;
                    
                    pq.push({dis[adjnode],adjnode});
                    par[adjnode]=node;
                }
            }
        }
        
        vector<int>path;
        int node = V-1;
        while(par[node]!=node){
            path.push_back(node);
            node=par[node];
        }
        path.push_back(0);
        reverse(path.begin(),path.end());
        
        for(auto it:path) cout<<it<<" ";
        cout<<endl;
        
        return dis;
    }
