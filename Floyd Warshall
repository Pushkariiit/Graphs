// Multiple source Shortest path 
// helps to detect negative cycle too


void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    for(int i=0;i<matrix.size();i++){
	        for(int j=0;j<matrix[0].size();j++){
	            if(i==j) matrix[i][i]=0;
	            if(matrix[i][j]==-1) matrix[i][j]=1e9;
	        }
	    }
	    
	    for(int via=0;via<matrix.size();via++){
	        for(int i=0;i<matrix.size();i++){
	            for(int j=0;j<matrix[0].size();j++){
	                matrix[i][j]=min(matrix[i][j],matrix[i][via]+matrix[via][j]);
	            }
	        }
	    }
	    
	    for(int i=0;i<n;i++){
	        if(matrix[i][i]<0) // negative cycle
	    }
	    
	    for(int i=0;i<matrix.size();i++){
	        for(int j=0;j<matrix[0].size();j++){
	            if(matrix[i][j]==1e9) matrix[i][j]=-1;
	        }
	    }
	}

Time complexity : O(n^3)


Dijsktra on every node is better option bcoz its tc will be n*ElogV but it does not work for negative cycle so we have to use floyd warshall algorithm
