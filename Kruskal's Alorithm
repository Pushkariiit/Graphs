Kruskal alogorithm

pair bana lena {wt,{adjnode,node}} ka then sort kr dena is vector ko wt ke according bas uske baad agar ultimate parent same hua u,v ka means same component ka part hai to usko mat lena else le lena aur agar le liye 
to union kr dena

class DisjointSet{
    vector<int>parent,rank;
    public:
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    int findPar(int node){
        if(node==parent[node]) return node;
        
        return parent[node]=findPar(parent[node]);
    }
    
    void unionByRank(int u,int v){
        int ult_u = findPar(u);
        int ult_v = findPar(v);
        
        if(ult_u==ult_v) return;
        
        if(rank[ult_u]<rank[ult_v]){
            parent[ult_u]=ult_v;
        }
        else if(rank[ult_u]>rank[ult_v]){
            parent[ult_v]=ult_u;
        }
        else{
            parent[ult_v]=ult_u;
            rank[ult_u]++;
        }
    }
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int,pair<int,int>>>edges;
        
        // {wt,{u,v}}
        // O(N+E)
        for(int i=0;i<V;i++){
            for(auto it:adj[i]){
                int u  =it[0];
                int wt = it[1];
                int node= i;
                edges.push_back({wt,{u,node}});
            }
        }

// O(Mlog M)
        sort(edges.begin(),edges.end());
        
        DisjointSet ds(V);
        
        int mst=0;
        // O(M*4a)*2

        for(auto it:edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            if(ds.findPar(u)!=ds.findPar(v)){
                mst+=wt;
                ds.unionByRank(u,v);
            }
        }
        return mst;
        
    }
};

Time Complexity: O(N+E) + O(E logE) + O(E*4Î±*2)   where N = no. of nodes and E = no. of edges. O(N+E) for extracting edge information from the adjacency list. 
O(E logE) for sorting the array consists of the edge tuples.
Finally, we are using the disjoint set operations inside a loop. The loop will continue to E times. 
Inside that loop, there are two disjoint set operations like findUPar() and UnionBySize() each taking 4 and so it will result in 4*2. That is why the last term O(E*4*2) is added.

Space Complexity: O(N) + O(N) + O(E) where E = no. of edges and N = no. of nodes. O(E) space is taken by the array that we are using to store the edge information.
And in the disjoint set data structure, we are using two N-sized arrays i.e. a parent and a size array (as we are using unionBySize() function otherwise, 
a rank array of the same size if unionByRank() is used) which result in the first two terms O(N).
