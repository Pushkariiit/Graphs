// Linear ordering of vertices such that if there is an edge between u and v then u appers before v

// Applied only in Directed Acyclic Graph (DAG)

// Using BFS (Kahn's Algorithm)

vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    
	    vector<int>indegree(V,0);
	    
	    for(int i=0;i<V;i++){
	        for(auto it:adj[i]){
	            indegree[it]++;
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<V;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto it:adj[node]){
	            indegree[it]--;
	            
	            if(indegree[it]==0) q.push(it);
	        }
	    }
	    return ans;
	}

Time  : O(V+E)

// DFS

void dfs(int str,vector<int>adj[],vector<int>&vis,stack<int>&st){
        vis[str]=1;
        
        for(auto it:adj[str]){
            if(!vis[it]){
                dfs(it,adj,vis,st);
            }
        }
        st.push(str);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    
	    vector<int>ans;
	    vector<int>vis(V,0);
	    stack<int>st;
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            dfs(i,adj,vis,st);
	        }
	    }
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}

// Time : O(V+E)
